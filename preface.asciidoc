A little RiakCore Book
=======================
LI, Yu (liyu1981@gmail.com)
v{{=it.version}}, {{=it.date}}
:doctype: book
:Author:    LI, Yu
:Email:     liyu1981@gmail.com
:Date:      {{=it.date}}
:Revision:  {{=it.version}}


[dedication]
For What and For Whom
---------------------

This little book is about https://github.com/basho/riak_core[RiakCore], which
is an application framework for building distributed, scalable, fault-tolerant
applications. RiakCore is written in http://www.erlang.org[Erlang] programming
language, open sourced by http://www.basho.com[Basho Technologies].

*For What*

RiakCore, as well as its foundation, Erlang, is all about building distributed,
scalable, fault-tolerant applications. This kind of application is usually for
serving purpose. Being different from what you use on your PC or phone,
application for serving others should never stop, be always available, and
recover from some really bad disasters.

*For Whom*

Serious programmers who write servers

.Perl Test
[source,perl]
----
# *Source* block
# Use: highlight code listings
# (require `source-highlight` or `pygmentize`)
use DBI;
my $dbh = DBI->connect('...',$u,$p)
    or die "connect: $dbh->errstr";
----

.Erlang Test
[source,erlang]
----
hello({name, Name}) ->
  "Hello" ++ Name;
hello(_) ->
  "Hello, world".
----

[source,ruby,numbered]
---------------------------------------------------------------------
#
# Useful Ruby base class extensions.
#

class Array

  # Execute a block passing it corresponding items in
  # +self+ and +other_array+.
  # If self has less items than other_array it is repeated.

  def cycle(other_array)  # :yields: item, other_item
    other_array.each_with_index do |item, index|
      yield(self[index % self.length], item)
    end
  end

end

if $0 == __FILE__                                 # <1>
  # Array#cycle test
  # true => 0
  # false => 1
  # true => 2
  # false => 3
  # true => 4
  puts 'Array#cycle test'                         # <2>
  [true, false].cycle([0, 1, 2, 3, 4]) do |a, b|
    puts "#{a.inspect} => #{b.inspect}"
  end
end
---------------------------------------------------------------------

<1> First callout.
<2> Second callout.

NOTE: Required skills: Erlang, distribution system
