Concept First, Code Second
--------------------------

[quote, Linus Torvalds, Message to linux-kernel mailing list]
____
Talk is cheap. Show me the code.
____

Yes, I know that famous quote(and you may find more
http://en.wikiquote.org/wiki/Linus_Torvald[here]). But this time things are
different. For serious backend server, especially the one based on RiakCore we
will code and analysis, it is necessary to know some concepts before coding.
Knowing the ideas behind the framework will usually save you lots of time in
searching the Internet and asking on QA websites (such as StackOverflow), but
the best part is that it will guide you to read the source code of others. In
this chapter, I will elaborate the ideas to answer following questions

1. Why writing distributed server is hard?
2. What is the usual(or better) practice to avoid single-point failure?
3. How to distribute the user requests in production ready way?
4. How to maintain the service when nodes of your cluster go down?
5. How to recover the down node and take over the job back?

Of course these questions do not cover all concepts in implementing distributed
system, but they cover most of them. With the understanding of these basic
ideas, we can write RiakCore-based servers to provide useful distributed
services. To enhance the servers we write to be highly robust, we may need to
dig deeper to the design of RiakCore. I leave those concepts to the time when
we need them.

TIP: Some of the answers in this chapter may be not the most
optimal/efficient ones. They are the answers chosen by inventors of
RiakCore. The inventors of RiakCore tried really hard to make it
practical, efficient and elegant in the same time. Sometime, the goal
can be achieved, but sometime it just can not.  When we are in the
latter scenario, the chosen design prefers being practical. In fact,
RiakCore is built while the inventors were building their flagship
product -- https://github.com/basho/riak_kv[Riak KV], which is a
distributed, highly reliable Key-value database. They have to make it
work first, then improve it to be efficient and elegant.


Why Writing Distributed Server is Hard?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[quote, Joe Armstrong, Why Programming is Difficult]
____
Many years ago I used to think that programming was easy, as the years have
passed I have realized that programming is not easy.
____

.Hello World in C
[source, c]
----
#include <stdio.h>

int main(int argc, char* argv[]) {
  printf("Hello, world!");
}
----

Get the Idea Through Thought Experiments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



Theory behind RiakCore for Dummies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



Are We Ready to Code Now?
~~~~~~~~~~~~~~~~~~~~~~~~~
