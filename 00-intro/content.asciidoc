Concept First, Code Second
--------------------------

[quote, Linus Torvalds, Message to linux-kernel mailing list]
____
Talk is cheap. Show me the code.
____

Yes, I know that famous quote(and you may find more
http://en.wikiquote.org/wiki/Linus_Torvald[here]). But this time things are
different. For serious backend server, especially the one based on RiakCore we
will code and analysis, it is necessary to know some concepts before coding.
Knowing the ideas behind the framework will usually save you lots of time in
searching the Internet and asking on QA websites (such as StackOverflow), but
the best part is that it will guide you to read the source code of others. In
this chapter, I will elaborate the ideas to answer following questions

1. Why writing distributed server is hard?
2. What is the usual(or better) practice to avoid single-point failure?
3. How to distribute the user requests in production ready way?
4. How to maintain the service when nodes of your cluster go down?
5. How to recover the down node and take over the job back?

Of course these questions do not cover all concepts in implementing distributed
system, but they cover most of them. With the understanding of these basic
ideas, we can write RiakCore-based servers to provide useful distributed
services. To enhance the servers we write to be highly robust, we may need to
dig deeper to the design of RiakCore. I leave those concepts to the time when
we need them.

TIP: Some of the answers in this chapter may be not the most
optimal/efficient ones. They are the answers chosen by inventors of
RiakCore. The inventors of RiakCore tried really hard to make it
practical, efficient and elegant in the same time. Sometime, the goal
can be achieved, but sometime it just can not.  When we are in the
latter scenario, the chosen design prefers being practical. In fact,
RiakCore is built while the inventors were building their flagship
product -- https://github.com/basho/riak_kv[Riak KV], which is a
distributed, highly reliable Key-value database. They have to make it
work first, then improve it to be efficient and elegant.


Why Writing Distributed Server is Hard?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[quote, Joe Armstrong, Why Programming is Difficult]
____
Many years ago I used to think that programming was easy, as the years have
passed I have realized that programming is not easy.
____

I agree with Joe because when I learned my first class in programming, I wrote
the famous 'Hello, world' like below

[source, c]
----
#include <stdio.h>

int main(int argc, char* argv[]) {
  printf("Hello, world!");
}
----

I felt really good as the text shown on my monitor. After that, I learned more
on how to get input from user, how to output something as feedback, and even
how to store my data in order to use them next time. The applications I wrote
in my early days of programming, usually go through a similar life cycle: (1) start
itself; (2) do some initialization; (3) wait for some user input; (4) do the job; (5) output
the result; (6) then kill itself. In fact, most applications we are using nowadays
are still of that type. They are technically easy to be done right.

But there are some different applications. They are usually called servers.
Server is a computer program running to serve the requests of other users or
programs. Its life cycle is: (1) start itself; (2) do some initialization; (3)
wait for some user input; (4) do the job; (5) output the result; (6) then go
back to step (3). You may have noticed that the only difference is the last,
which is small but fundamental. The difference requires our server to be
robust, fault-tolerant, and scalable.

Now image that we have to turn our 'Hello, world' application into something
useful, such as a beacon service named 'Hello', which simply sends out message
when user request, such as "Hello, world". It could be used in many areas, from
the cell phone network around you, to the robots roaming on Mars. As a service,
our 'Hello' should be

Robust::
  It accepts whatever user input, even those are crazy.

Fault-tolerance::
  It is always on as long as the hardware is fine. It also have to recover
after the hardware issue is resolved.

Scalable::
  It can serve as many requests as the horse power of hardware is enough. It
can also serve more requests when more hardwares are added in.

It is simple to be robust for our 'Hello': we can just ignore the content of
user input, and just response string "Hello, world" to user whenever there is
input. But if we want to do more, such as send back "Hello, <user's name>", we
have to consider on how to process user input. And if we allow user input to be
something complex, such as a data structure, much more work have to be done.

To be fault-tolerance, more improvements has to be done to our 'Hello'.

Get the Idea Through Thought Experiments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



Theory behind RiakCore for Dummies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



Are We Ready to Code Now?
~~~~~~~~~~~~~~~~~~~~~~~~~
